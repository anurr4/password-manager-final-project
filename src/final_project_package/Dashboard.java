package final_project_package;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Dashboard extends javax.swing.JFrame {
    /**
     * Creates new form Dashboard
     */
    private PasswordGenerator passwordGenerator;
    private FileManager fileManager;
    private DefaultTableModel model;
    private DefaultTableModel searchModel;
    private List<PasswordEntry> passwords;
    
    public Dashboard() {
        initComponents();
        setTitle("Password Manager");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        usernameLabel.setText(Login.loginUsername);
        usernameDisplayLabel.setText(Login.loginUsername);
        passwordGenerator = new PasswordGenerator();
        model = (DefaultTableModel) passwordTable.getModel();
        searchModel = (DefaultTableModel) searchPasswordTable.getModel();
        fileManager = new FileManager("Database/" + Login.loginUsername + "/passwords");
        try {
            passwords = fileManager.readPasswords();
        } catch (Exception e) {
            passwords = new ArrayList<>();
        }
        
        loadPasswordsToTable();
        countPasswords();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        usernameDisplayLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        passwordCountLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchPasswordTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        appNameField = new javax.swing.JTextField();
        emailPMField = new javax.swing.JTextField();
        passwordPMField = new javax.swing.JTextField();
        addPasswordButton = new javax.swing.JButton();
        usernamePMField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        passwordTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        passwordOutputField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        passwordLengthInputArea = new javax.swing.JTextField();
        uppercaseToggle = new javax.swing.JToggleButton();
        lowercaseToggle = new javax.swing.JToggleButton();
        numbersToggle = new javax.swing.JToggleButton();
        symbolsToggle = new javax.swing.JToggleButton();
        generatePasswordButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        usernameLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/final_project_package/user_icon (1).png"))); // NOI18N
        usernameLabel.setText("Username");

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jPanel2.setToolTipText("");
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setName(""); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 526));

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        jLabel1.setText("Welcome");

        usernameDisplayLabel.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        usernameDisplayLabel.setText("{user}");

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        jLabel3.setText("You have");

        passwordCountLabel.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        passwordCountLabel.setText("{0}");

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        jLabel5.setText("saved passwords.");

        searchField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        searchField.setText("Search Account...");
        searchField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchFieldFocusLost(evt);
            }
        });

        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/final_project_package/search-7525.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        DefaultTableModel searchModel = new DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Application", "Username", "Email", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        searchPasswordTable.setModel(searchModel
        );
        jScrollPane1.setViewportView(searchPasswordTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(usernameDisplayLabel))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(passwordCountLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(usernameDisplayLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(passwordCountLabel)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jTabbedPane1.addTab("Dashboard", null, jPanel2, "");

        jLabel6.setFont(new java.awt.Font("Franklin Gothic Book", 0, 28)); // NOI18N
        jLabel6.setText("Add Password");

        appNameField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        appNameField.setText("Application Name");
        appNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                appNameFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                appNameFieldFocusLost(evt);
            }
        });

        emailPMField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        emailPMField.setText("Email");
        emailPMField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                emailPMFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailPMFieldFocusLost(evt);
            }
        });

        passwordPMField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        passwordPMField.setText("Password");
        passwordPMField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordPMFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordPMFieldFocusLost(evt);
            }
        });

        addPasswordButton.setBackground(new java.awt.Color(18, 100, 221));
        addPasswordButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        addPasswordButton.setForeground(new java.awt.Color(255, 255, 255));
        addPasswordButton.setText("Save");
        addPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPasswordButtonActionPerformed(evt);
            }
        });

        usernamePMField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 14)); // NOI18N
        usernamePMField.setText("Username");
        usernamePMField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernamePMFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                usernamePMFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(304, 304, 304)
                        .addComponent(addPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(jLabel6))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailPMField)
                            .addComponent(appNameField)
                            .addComponent(passwordPMField, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernamePMField))))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel6)
                .addGap(30, 30, 30)
                .addComponent(appNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(usernamePMField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(emailPMField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(passwordPMField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(addPasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Password", jPanel3);

        editButton.setBackground(new java.awt.Color(18, 100, 221));
        editButton.setFont(new java.awt.Font("Franklin Gothic Book", 1, 14)); // NOI18N
        editButton.setForeground(new java.awt.Color(255, 255, 255));
        editButton.setText("EDIT");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        removeButton.setBackground(new java.awt.Color(255, 102, 102));
        removeButton.setFont(new java.awt.Font("Franklin Gothic Book", 1, 14)); // NOI18N
        removeButton.setForeground(new java.awt.Color(255, 255, 255));
        removeButton.setText("REMOVE");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        DefaultTableModel model = new DefaultTableModel(
            new Object [][] {},
            new String [] {
                "Application", "Username", "Email", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        passwordTable.setModel(model);
        jScrollPane2.setViewportView(passwordTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(215, 215, 215)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View Passwords", jPanel4);

        jLabel7.setFont(new java.awt.Font("Franklin Gothic Book", 0, 28)); // NOI18N
        jLabel7.setText("Password Generator");

        passwordOutputField.setEditable(false);
        passwordOutputField.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Franklin Gothic Book", 0, 24)); // NOI18N
        jLabel8.setText("Password Length");

        passwordLengthInputArea.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N

        uppercaseToggle.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        uppercaseToggle.setText("Uppercase");

        lowercaseToggle.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        lowercaseToggle.setText("Lowercase");

        numbersToggle.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        numbersToggle.setText("Numbers");

        symbolsToggle.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        symbolsToggle.setText("Symbols");

        generatePasswordButton.setBackground(new java.awt.Color(18, 100, 221));
        generatePasswordButton.setFont(new java.awt.Font("Franklin Gothic Book", 0, 18)); // NOI18N
        generatePasswordButton.setForeground(new java.awt.Color(255, 255, 255));
        generatePasswordButton.setText("Generate");
        generatePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePasswordButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(239, 239, 239)
                .addComponent(jLabel7)
                .addContainerGap(271, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(passwordOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numbersToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uppercaseToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passwordLengthInputArea, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lowercaseToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(symbolsToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(189, 189, 189))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(generatePasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(296, 296, 296))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(passwordOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLengthInputArea, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lowercaseToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uppercaseToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numbersToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(symbolsToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(generatePasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Generate Passwords", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(usernameLabel)
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usernameLabel)
                .addGap(12, 12, 12)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        performSearch();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusGained
        if (searchField.getText().equals("Search Account...")){
            searchField.setText("");
        }
    }//GEN-LAST:event_searchFieldFocusGained

    private void searchFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchFieldFocusLost
        if(searchField.getText().isEmpty()){
            searchField.setText("Search Account...");
        }
    }//GEN-LAST:event_searchFieldFocusLost

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        editPassword();
    }//GEN-LAST:event_editButtonActionPerformed

    private void appNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_appNameFieldFocusGained
        if(appNameField.getText().equals("Application Name")){
            appNameField.setText("");
        }
    }//GEN-LAST:event_appNameFieldFocusGained

    private void appNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_appNameFieldFocusLost
        if(appNameField.getText().isEmpty()){
            appNameField.setText("Application Name");
        }
    }//GEN-LAST:event_appNameFieldFocusLost

    private void usernamePMFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernamePMFieldFocusGained
        if(usernamePMField.getText().equals("Username")){
            usernamePMField.setText("");
        }
    }//GEN-LAST:event_usernamePMFieldFocusGained

    private void usernamePMFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernamePMFieldFocusLost
        if(usernamePMField.getText().isEmpty()){
            usernamePMField.setText("Username");
        }
    }//GEN-LAST:event_usernamePMFieldFocusLost

    private void emailPMFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailPMFieldFocusGained
        if(emailPMField.getText().equals("Email")){
            emailPMField.setText("");
        }
    }//GEN-LAST:event_emailPMFieldFocusGained

    private void emailPMFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailPMFieldFocusLost
        if(emailPMField.getText().isEmpty()){
            emailPMField.setText("Email");
        }
    }//GEN-LAST:event_emailPMFieldFocusLost

    private void passwordPMFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordPMFieldFocusGained
        if(passwordPMField.getText().equals("Password")){
            passwordPMField.setText("");
        }
    }//GEN-LAST:event_passwordPMFieldFocusGained

    private void passwordPMFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordPMFieldFocusLost
        if(passwordPMField.getText().isEmpty()){
            passwordPMField.setText("Password");
        }
    }//GEN-LAST:event_passwordPMFieldFocusLost

    private void generatePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePasswordButtonActionPerformed
        if(passwordLengthInputArea.getText().length() <= 0) return;
        boolean anyToggleSelected = lowercaseToggle.isSelected() || uppercaseToggle.isSelected() || numbersToggle.isSelected() || symbolsToggle.isSelected(); 
        
        int passwordLength = Integer.parseInt(passwordLengthInputArea.getText());
        if(anyToggleSelected){
            String generatedPassword = passwordGenerator.generatePassword(passwordLength, uppercaseToggle.isSelected(), lowercaseToggle.isSelected(), numbersToggle.isSelected(), symbolsToggle.isSelected());
            
            passwordOutputField.setText(generatedPassword);
        }
    }//GEN-LAST:event_generatePasswordButtonActionPerformed

    private void addPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPasswordButtonActionPerformed
        addPassword();
    }//GEN-LAST:event_addPasswordButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        removePassword();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addPassword() {
        String platform = appNameField.getText();
        String username = usernamePMField.getText();
        String email = emailPMField.getText();
        String password = passwordPMField.getText();

        if (platform.isEmpty() || username.isEmpty() || email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required!");
            return;
        }

        PasswordEntry entry = new PasswordEntry(platform, username, email, password);
        passwords.add(entry);

        try {
            fileManager.writePasswords(passwords);
            loadPasswordsToTable();
            JOptionPane.showMessageDialog(this, "Password added successfully!");
            appNameField.setText("Application Name");
            usernamePMField.setText("Username");
            emailPMField.setText("Email");
            passwordPMField.setText("Password");
            countPasswords();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saving password: " + e.getMessage());
        }
    }

    private void loadPasswordsToTable() {
        model.setRowCount(0); // Clear existing rows

        int n = passwords.size();
        boolean swapped;

        for (int i = 0; i < n - 1; i++) {
            swapped = false; // Reset swapped flag for this pass
            for (int j = 0; j < n - i - 1; j++) {
                if (passwords.get(j).getPlatform().compareToIgnoreCase(passwords.get(j + 1).getPlatform()) > 0) {
                    // Swap entries
                    PasswordEntry temp = passwords.get(j);
                    passwords.set(j, passwords.get(j + 1));
                    passwords.set(j + 1, temp);
                    swapped = true; // Mark that a swap occurred
                }
            }
            // If no swaps occurred, list is sorted, break early
            if (!swapped) {
                break;
            }
        }
        // Populate the JTable with sorted passwords
        for (PasswordEntry entry : passwords) {
            model.addRow(new Object[]{entry.getPlatform(), entry.getUsername(), entry.getEmail(), entry.getPassword()});
        }
    }

    private void removePassword() {
        int selectedRow = passwordTable.getSelectedRow();
        if (selectedRow >= 0) {
            passwords.remove(selectedRow);

            try {
                fileManager.writePasswords(passwords);
                loadPasswordsToTable();
                JOptionPane.showMessageDialog(this, "Password removed successfully!");
                countPasswords();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error removing password: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No password selected.");
        }
    }

    private void editPassword() {
        int selectedRow = passwordTable.getSelectedRow();
        if (selectedRow >= 0) {
            String newPlatform = JOptionPane.showInputDialog(this, "Enter new platform:");
            String newUsername = JOptionPane.showInputDialog(this, "Enter new username:");
            String newEmail = JOptionPane.showInputDialog(this, "Enter new email:");
            String newPassword = JOptionPane.showInputDialog(this, "Enter new password:");

            if (newPlatform != null && newUsername != null && newEmail != null && newPassword != null) {
                PasswordEntry entry = passwords.get(selectedRow);
                entry.setPlatform(newPlatform);
                entry.setUsername(newUsername);
                entry.setEmail(newEmail);
                entry.setPassword(newPassword);

                try {
                    fileManager.writePasswords(passwords);
                    loadPasswordsToTable();
                    JOptionPane.showMessageDialog(this, "Password updated successfully!");
                    countPasswords();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error updating password: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No password selected.");
        }
    }
    
    private void performSearch(){
        String searchTerm = searchField.getText().trim();
        List<PasswordEntry> filteredEntries = filteredEntries(searchTerm);
        updateTable(filteredEntries);
    }
    
    private List<PasswordEntry> filteredEntries(String searchTerm){
        if(searchTerm.isEmpty()){
            return passwords;
        }
        return passwords.stream().filter(entry -> entry.matchesSearchTerm(searchTerm)).toList();
    }
    
    private void updateTable(List<PasswordEntry> entries){
        searchModel.setRowCount(0);
        
        for(PasswordEntry entry : entries){
            searchModel.addRow(new Object[]{
                entry.getPlatform(),
                entry.getUsername(),
                entry.getEmail(),
                entry.getPassword()
            });
        }
    }
    private void countPasswords(){
        int passwordCount = 0;
        for(int i = 0; i < passwords.size(); i++){
            passwordCount +=1;
        }
        passwordCountLabel.setText(Integer.toString(passwordCount));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPasswordButton;
    private javax.swing.JTextField appNameField;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField emailPMField;
    private javax.swing.JButton generatePasswordButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToggleButton lowercaseToggle;
    private javax.swing.JToggleButton numbersToggle;
    private javax.swing.JLabel passwordCountLabel;
    private javax.swing.JTextField passwordLengthInputArea;
    private javax.swing.JTextField passwordOutputField;
    private javax.swing.JTextField passwordPMField;
    private javax.swing.JTable passwordTable;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JTable searchPasswordTable;
    private javax.swing.JToggleButton symbolsToggle;
    private javax.swing.JToggleButton uppercaseToggle;
    private javax.swing.JLabel usernameDisplayLabel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernamePMField;
    // End of variables declaration//GEN-END:variables

   

}
